@using System.Text
@using System.Text.Json
@using WhatsAppConvertor.Domain
@using WhatsAppConvertor.Domain.Dto
@model RazorTemplates.Models.ChatMessagesModel

<!doctype html>
<html lang="en">
  <head>
    <style>
        .chat-title {
            font-size: larger;
            align-content: center;
        }

        .quoted-message {
            font-size: smaller;
            color: grey;
        }

        .message-time {
            font-size: x-small;
            text-align: right;
        }
    </style>

    <style>
        @{
            await Html.RenderPartialAsync("CSS/bootstrap.min.css.cshtml");
        }
    </style>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Whats App - @Model.DisplayName</title>
    
  </head>
    <body>
        <div class="container">
            <div class="row">
            @{
                bool MessageTypeHasThumbNail(MessageType? messageType)
                {
                    return
                        messageType == MessageType.Image ||
                        messageType == MessageType.Video ||
                        messageType == MessageType.Gif ||
                        messageType == MessageType.Document;
                }

                IEnumerable<IGrouping<DateTime, ChatMessageDto>> messagesGroupByDate = Model.ChatMessages.GroupBy(cm => cm.Timestamp.Date);
                StringBuilder groupBuilder = new();

                groupBuilder.AppendLine("<div class=''>");

                foreach (var messageGroupByDate in messagesGroupByDate)
                {
                    DateTime groupDate = messageGroupByDate.Key.Date;
                    groupBuilder.AppendLine($"<div class=''>{groupDate.Date.ToLongDateString()}.</div>");

                    foreach (ChatMessageDto chat in messageGroupByDate)
                    {
                        MessageType? messageType = chat.MessageType;
                        string offsetClass = chat.MessageFromMe ? "offset-md-3" : string.Empty;

                        groupBuilder.AppendLine($"<div class='message col-md-5 border rounded {offsetClass}'>");

                        if (!string.IsNullOrWhiteSpace(chat.QuotedText)) {
                            groupBuilder.AppendLine($"<div class='quoted-message'>\"{chat.QuotedText}\"</div>");
                        }

                        if (messageType == MessageType.Text)
                        {
                            groupBuilder.AppendLine($"<div class=''>{chat.MessageText}</div>");
                        }
                        else if (MessageTypeHasThumbNail(messageType) && !string.IsNullOrWhiteSpace(chat.Thumbnail))
                        {
                            string imgHtml = $"<img alt='{chat.MessageText}' src='data:image/jpeg;base64,{chat.Thumbnail}' />";
                            string messageHtml = $"<div>{chat.MessageText}</div>";

                            if (!string.IsNullOrWhiteSpace(chat.FilePath))
                            {
                                groupBuilder.AppendLine($"<a href='{chat.FilePath}' target='_blank'>")
                                    .AppendLine(imgHtml)
                                    .AppendLine("</a>")
                                    .AppendLine(messageHtml);
                            }
                            else
                            {
                                groupBuilder.AppendLine(imgHtml)
                                    .AppendLine(messageHtml);
                            }
                        }
                        else if (messageType == MessageType.Contact)
                        {
                            groupBuilder.AppendLine($"<div>Contact: {chat.MessageText}</div>");
                        }

                        groupBuilder.AppendLine($"<div class='message-time'>{chat.Timestamp.ToShortTimeString()}</div>");

                        groupBuilder.AppendLine("</div>");
                    }
                }

                groupBuilder.AppendLine("</div>");

                // Write the html
                <div class="chat-title">@Model.DisplayName </div>
                @Html.Raw(groupBuilder);
            }
            </div>
        </div>
    </body>
</html>

<script>
(function() {
}());
</script>